// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
)

// MockImageUseCase is a mock of ImageUseCase interface.
type MockImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockImageUseCaseMockRecorder
}

// MockImageUseCaseMockRecorder is the mock recorder for MockImageUseCase.
type MockImageUseCaseMockRecorder struct {
	mock *MockImageUseCase
}

// NewMockImageUseCase creates a new mock instance.
func NewMockImageUseCase(ctrl *gomock.Controller) *MockImageUseCase {
	mock := &MockImageUseCase{ctrl: ctrl}
	mock.recorder = &MockImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUseCase) EXPECT() *MockImageUseCaseMockRecorder {
	return m.recorder
}

// GetSpotImgURLBySpotID mocks base method.
func (m *MockImageUseCase) GetSpotImgURLBySpotID(ctx context.Context, spotID string) ([]model.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpotImgURLBySpotID", ctx, spotID)
	ret0, _ := ret[0].([]model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotImgURLBySpotID indicates an expected call of GetSpotImgURLBySpotID.
func (mr *MockImageUseCaseMockRecorder) GetSpotImgURLBySpotID(ctx, spotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotImgURLBySpotID", reflect.TypeOf((*MockImageUseCase)(nil).GetSpotImgURLBySpotID), ctx, spotID)
}

// ImageCreate mocks base method.
func (m *MockImageUseCase) ImageCreate(ctx context.Context, spotID uuid.UUID, url string, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageCreate", ctx, spotID, url, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageCreate indicates an expected call of ImageCreate.
func (mr *MockImageUseCaseMockRecorder) ImageCreate(ctx, spotID, url, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageCreate", reflect.TypeOf((*MockImageUseCase)(nil).ImageCreate), ctx, spotID, url, user)
}

// ImageDelete mocks base method.
func (m *MockImageUseCase) ImageDelete(ctx context.Context, id, userID string, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageDelete", ctx, id, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageDelete indicates an expected call of ImageDelete.
func (mr *MockImageUseCaseMockRecorder) ImageDelete(ctx, id, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageDelete", reflect.TypeOf((*MockImageUseCase)(nil).ImageDelete), ctx, id, userID, user)
}
