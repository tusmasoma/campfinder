// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
	usecase "github.com/tusmasoma/campfinder/docker/back/usecase"
)

// MockCommentUseCase is a mock of CommentUseCase interface.
type MockCommentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUseCaseMockRecorder
}

// MockCommentUseCaseMockRecorder is the mock recorder for MockCommentUseCase.
type MockCommentUseCaseMockRecorder struct {
	mock *MockCommentUseCase
}

// NewMockCommentUseCase creates a new mock instance.
func NewMockCommentUseCase(ctrl *gomock.Controller) *MockCommentUseCase {
	mock := &MockCommentUseCase{ctrl: ctrl}
	mock.recorder = &MockCommentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUseCase) EXPECT() *MockCommentUseCaseMockRecorder {
	return m.recorder
}

// BatchCreateComments mocks base method.
func (m *MockCommentUseCase) BatchCreateComments(ctx context.Context, params *usecase.BatchCreateCommentsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateComments", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateComments indicates an expected call of BatchCreateComments.
func (mr *MockCommentUseCaseMockRecorder) BatchCreateComments(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateComments", reflect.TypeOf((*MockCommentUseCase)(nil).BatchCreateComments), ctx, params)
}

// CreateComment mocks base method.
func (m *MockCommentUseCase) CreateComment(ctx context.Context, params *usecase.CreateCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUseCaseMockRecorder) CreateComment(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUseCase)(nil).CreateComment), ctx, params)
}

// DeleteComment mocks base method.
func (m *MockCommentUseCase) DeleteComment(ctx context.Context, id, userID string, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUseCaseMockRecorder) DeleteComment(ctx, id, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUseCase)(nil).DeleteComment), ctx, id, userID, user)
}

// ListComments mocks base method.
func (m *MockCommentUseCase) ListComments(ctx context.Context, spotID string) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, spotID)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockCommentUseCaseMockRecorder) ListComments(ctx, spotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockCommentUseCase)(nil).ListComments), ctx, spotID)
}

// UpdateComment mocks base method.
func (m *MockCommentUseCase) UpdateComment(ctx context.Context, id, spotID, userID uuid.UUID, starRate float64, text string, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, id, spotID, userID, starRate, text, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentUseCaseMockRecorder) UpdateComment(ctx, id, spotID, userID, starRate, text, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentUseCase)(nil).UpdateComment), ctx, id, spotID, userID, starRate, text, user)
}
