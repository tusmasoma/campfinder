// Code generated by MockGen. DO NOT EDIT.
// Source: spot.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
	usecase "github.com/tusmasoma/campfinder/docker/back/usecase"
)

// MockSpotUseCase is a mock of SpotUseCase interface.
type MockSpotUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSpotUseCaseMockRecorder
}

// MockSpotUseCaseMockRecorder is the mock recorder for MockSpotUseCase.
type MockSpotUseCaseMockRecorder struct {
	mock *MockSpotUseCase
}

// NewMockSpotUseCase creates a new mock instance.
func NewMockSpotUseCase(ctrl *gomock.Controller) *MockSpotUseCase {
	mock := &MockSpotUseCase{ctrl: ctrl}
	mock.recorder = &MockSpotUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotUseCase) EXPECT() *MockSpotUseCaseMockRecorder {
	return m.recorder
}

// BatchCreateSpots mocks base method.
func (m *MockSpotUseCase) BatchCreateSpots(ctx context.Context, params *usecase.BatchCreateSpotParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateSpots", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateSpots indicates an expected call of BatchCreateSpots.
func (mr *MockSpotUseCaseMockRecorder) BatchCreateSpots(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateSpots", reflect.TypeOf((*MockSpotUseCase)(nil).BatchCreateSpots), ctx, params)
}

// CreateSpot mocks base method.
func (m *MockSpotUseCase) CreateSpot(ctx context.Context, params *usecase.CreateSpotParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpot", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpot indicates an expected call of CreateSpot.
func (mr *MockSpotUseCaseMockRecorder) CreateSpot(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpot", reflect.TypeOf((*MockSpotUseCase)(nil).CreateSpot), ctx, params)
}

// GetSpot mocks base method.
func (m *MockSpotUseCase) GetSpot(ctx context.Context, spotID string) model.Spot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpot", ctx, spotID)
	ret0, _ := ret[0].(model.Spot)
	return ret0
}

// GetSpot indicates an expected call of GetSpot.
func (mr *MockSpotUseCaseMockRecorder) GetSpot(ctx, spotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpot", reflect.TypeOf((*MockSpotUseCase)(nil).GetSpot), ctx, spotID)
}

// ListSpots mocks base method.
func (m *MockSpotUseCase) ListSpots(ctx context.Context, categories []string) []model.Spot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpots", ctx, categories)
	ret0, _ := ret[0].([]model.Spot)
	return ret0
}

// ListSpots indicates an expected call of ListSpots.
func (mr *MockSpotUseCaseMockRecorder) ListSpots(ctx, categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpots", reflect.TypeOf((*MockSpotUseCase)(nil).ListSpots), ctx, categories)
}
