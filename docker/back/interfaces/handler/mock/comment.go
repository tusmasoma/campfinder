// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentHandler is a mock of CommentHandler interface.
type MockCommentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommentHandlerMockRecorder
}

// MockCommentHandlerMockRecorder is the mock recorder for MockCommentHandler.
type MockCommentHandlerMockRecorder struct {
	mock *MockCommentHandler
}

// NewMockCommentHandler creates a new mock instance.
func NewMockCommentHandler(ctrl *gomock.Controller) *MockCommentHandler {
	mock := &MockCommentHandler{ctrl: ctrl}
	mock.recorder = &MockCommentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentHandler) EXPECT() *MockCommentHandlerMockRecorder {
	return m.recorder
}

// HandleCommentCreate mocks base method.
func (m *MockCommentHandler) HandleCommentCreate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCommentCreate", w, r)
}

// HandleCommentCreate indicates an expected call of HandleCommentCreate.
func (mr *MockCommentHandlerMockRecorder) HandleCommentCreate(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCommentCreate", reflect.TypeOf((*MockCommentHandler)(nil).HandleCommentCreate), w, r)
}

// HandleCommentDelete mocks base method.
func (m *MockCommentHandler) HandleCommentDelete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCommentDelete", w, r)
}

// HandleCommentDelete indicates an expected call of HandleCommentDelete.
func (mr *MockCommentHandlerMockRecorder) HandleCommentDelete(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCommentDelete", reflect.TypeOf((*MockCommentHandler)(nil).HandleCommentDelete), w, r)
}

// HandleCommentGet mocks base method.
func (m *MockCommentHandler) HandleCommentGet(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCommentGet", w, r)
}

// HandleCommentGet indicates an expected call of HandleCommentGet.
func (mr *MockCommentHandlerMockRecorder) HandleCommentGet(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCommentGet", reflect.TypeOf((*MockCommentHandler)(nil).HandleCommentGet), w, r)
}

// HandleCommentUpdate mocks base method.
func (m *MockCommentHandler) HandleCommentUpdate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCommentUpdate", w, r)
}

// HandleCommentUpdate indicates an expected call of HandleCommentUpdate.
func (mr *MockCommentHandlerMockRecorder) HandleCommentUpdate(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCommentUpdate", reflect.TypeOf((*MockCommentHandler)(nil).HandleCommentUpdate), w, r)
}
