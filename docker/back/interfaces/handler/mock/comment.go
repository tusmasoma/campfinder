// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentHandler is a mock of CommentHandler interface.
type MockCommentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommentHandlerMockRecorder
}

// MockCommentHandlerMockRecorder is the mock recorder for MockCommentHandler.
type MockCommentHandlerMockRecorder struct {
	mock *MockCommentHandler
}

// NewMockCommentHandler creates a new mock instance.
func NewMockCommentHandler(ctrl *gomock.Controller) *MockCommentHandler {
	mock := &MockCommentHandler{ctrl: ctrl}
	mock.recorder = &MockCommentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentHandler) EXPECT() *MockCommentHandlerMockRecorder {
	return m.recorder
}

// BatchCreateComments mocks base method.
func (m *MockCommentHandler) BatchCreateComments(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchCreateComments", w, r)
}

// BatchCreateComments indicates an expected call of BatchCreateComments.
func (mr *MockCommentHandlerMockRecorder) BatchCreateComments(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateComments", reflect.TypeOf((*MockCommentHandler)(nil).BatchCreateComments), w, r)
}

// CreateComment mocks base method.
func (m *MockCommentHandler) CreateComment(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateComment", w, r)
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentHandlerMockRecorder) CreateComment(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentHandler)(nil).CreateComment), w, r)
}

// DeleteComment mocks base method.
func (m *MockCommentHandler) DeleteComment(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteComment", w, r)
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentHandlerMockRecorder) DeleteComment(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentHandler)(nil).DeleteComment), w, r)
}

// ListComments mocks base method.
func (m *MockCommentHandler) ListComments(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListComments", w, r)
}

// ListComments indicates an expected call of ListComments.
func (mr *MockCommentHandlerMockRecorder) ListComments(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockCommentHandler)(nil).ListComments), w, r)
}

// UpdateComment mocks base method.
func (m *MockCommentHandler) UpdateComment(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateComment", w, r)
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentHandlerMockRecorder) UpdateComment(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentHandler)(nil).UpdateComment), w, r)
}
