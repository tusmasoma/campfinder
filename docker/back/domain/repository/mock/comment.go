// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
	repository "github.com/tusmasoma/campfinder/docker/back/domain/repository"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockCommentRepository) BatchCreate(ctx context.Context, comments []model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockCommentRepositoryMockRecorder) BatchCreate(ctx, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockCommentRepository)(nil).BatchCreate), ctx, comments)
}

// Create mocks base method.
func (m *MockCommentRepository) Create(ctx context.Context, comment model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommentRepositoryMockRecorder) Create(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepository)(nil).Create), ctx, comment)
}

// Delete mocks base method.
func (m *MockCommentRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCommentRepository) Get(ctx context.Context, id string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCommentRepository) List(ctx context.Context, qcs []repository.QueryCondition) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, qcs)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCommentRepositoryMockRecorder) List(ctx, qcs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCommentRepository)(nil).List), ctx, qcs)
}

// Update mocks base method.
func (m *MockCommentRepository) Update(ctx context.Context, id string, comment model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommentRepositoryMockRecorder) Update(ctx, id, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentRepository)(nil).Update), ctx, id, comment)
}

// MockCommentsCacheRepository is a mock of CommentsCacheRepository interface.
type MockCommentsCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsCacheRepositoryMockRecorder
}

// MockCommentsCacheRepositoryMockRecorder is the mock recorder for MockCommentsCacheRepository.
type MockCommentsCacheRepositoryMockRecorder struct {
	mock *MockCommentsCacheRepository
}

// NewMockCommentsCacheRepository creates a new mock instance.
func NewMockCommentsCacheRepository(ctrl *gomock.Controller) *MockCommentsCacheRepository {
	mock := &MockCommentsCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCommentsCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsCacheRepository) EXPECT() *MockCommentsCacheRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCommentsCacheRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentsCacheRepositoryMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentsCacheRepository)(nil).Delete), ctx, key)
}

// Exists mocks base method.
func (m *MockCommentsCacheRepository) Exists(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockCommentsCacheRepositoryMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCommentsCacheRepository)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockCommentsCacheRepository) Get(ctx context.Context, key string) (*model.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*model.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentsCacheRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentsCacheRepository)(nil).Get), ctx, key)
}

// Scan mocks base method.
func (m *MockCommentsCacheRepository) Scan(ctx context.Context, match string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, match)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockCommentsCacheRepositoryMockRecorder) Scan(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockCommentsCacheRepository)(nil).Scan), ctx, match)
}

// Set mocks base method.
func (m *MockCommentsCacheRepository) Set(ctx context.Context, key string, comments model.Comments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCommentsCacheRepositoryMockRecorder) Set(ctx, key, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCommentsCacheRepository)(nil).Set), ctx, key, comments)
}
