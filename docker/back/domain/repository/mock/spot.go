// Code generated by MockGen. DO NOT EDIT.
// Source: spot.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
	repository "github.com/tusmasoma/campfinder/docker/back/domain/repository"
)

// MockSpotRepository is a mock of SpotRepository interface.
type MockSpotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpotRepositoryMockRecorder
}

// MockSpotRepositoryMockRecorder is the mock recorder for MockSpotRepository.
type MockSpotRepositoryMockRecorder struct {
	mock *MockSpotRepository
}

// NewMockSpotRepository creates a new mock instance.
func NewMockSpotRepository(ctrl *gomock.Controller) *MockSpotRepository {
	mock := &MockSpotRepository{ctrl: ctrl}
	mock.recorder = &MockSpotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotRepository) EXPECT() *MockSpotRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSpotRepository) Create(ctx context.Context, spot model.Spot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, spot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSpotRepositoryMockRecorder) Create(ctx, spot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpotRepository)(nil).Create), ctx, spot)
}

// CreateOrUpdate mocks base method.
func (m *MockSpotRepository) CreateOrUpdate(ctx context.Context, id string, qcs []repository.QueryCondition, spot model.Spot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, id, qcs, spot)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockSpotRepositoryMockRecorder) CreateOrUpdate(ctx, id, qcs, spot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSpotRepository)(nil).CreateOrUpdate), ctx, id, qcs, spot)
}

// Delete mocks base method.
func (m *MockSpotRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpotRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpotRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSpotRepository) Get(ctx context.Context, id string) (*model.Spot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Spot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSpotRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpotRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockSpotRepository) List(ctx context.Context, qcs []repository.QueryCondition) ([]model.Spot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, qcs)
	ret0, _ := ret[0].([]model.Spot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSpotRepositoryMockRecorder) List(ctx, qcs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSpotRepository)(nil).List), ctx, qcs)
}

// Update mocks base method.
func (m *MockSpotRepository) Update(ctx context.Context, id string, spot model.Spot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, spot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpotRepositoryMockRecorder) Update(ctx, id, spot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpotRepository)(nil).Update), ctx, id, spot)
}

// MockSpotsCacheRepository is a mock of SpotsCacheRepository interface.
type MockSpotsCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpotsCacheRepositoryMockRecorder
}

// MockSpotsCacheRepositoryMockRecorder is the mock recorder for MockSpotsCacheRepository.
type MockSpotsCacheRepositoryMockRecorder struct {
	mock *MockSpotsCacheRepository
}

// NewMockSpotsCacheRepository creates a new mock instance.
func NewMockSpotsCacheRepository(ctrl *gomock.Controller) *MockSpotsCacheRepository {
	mock := &MockSpotsCacheRepository{ctrl: ctrl}
	mock.recorder = &MockSpotsCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotsCacheRepository) EXPECT() *MockSpotsCacheRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSpotsCacheRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpotsCacheRepositoryMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpotsCacheRepository)(nil).Delete), ctx, key)
}

// Exists mocks base method.
func (m *MockSpotsCacheRepository) Exists(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSpotsCacheRepositoryMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSpotsCacheRepository)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockSpotsCacheRepository) Get(ctx context.Context, key string) (*model.Spots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*model.Spots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSpotsCacheRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpotsCacheRepository)(nil).Get), ctx, key)
}

// Scan mocks base method.
func (m *MockSpotsCacheRepository) Scan(ctx context.Context, match string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, match)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockSpotsCacheRepositoryMockRecorder) Scan(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockSpotsCacheRepository)(nil).Scan), ctx, match)
}

// Set mocks base method.
func (m *MockSpotsCacheRepository) Set(ctx context.Context, key string, spots model.Spots) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, spots)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSpotsCacheRepositoryMockRecorder) Set(ctx, key, spots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSpotsCacheRepository)(nil).Set), ctx, key, spots)
}
