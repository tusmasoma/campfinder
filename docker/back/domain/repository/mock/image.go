// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/tusmasoma/campfinder/docker/back/domain/model"
	repository "github.com/tusmasoma/campfinder/docker/back/domain/repository"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageRepository) Create(ctx context.Context, img model.Image, opts ...repository.QueryOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, img}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockImageRepositoryMockRecorder) Create(ctx, img interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, img}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepository)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockImageRepository) Delete(ctx context.Context, id string, opts ...repository.QueryOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageRepositoryMockRecorder) Delete(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageRepository)(nil).Delete), varargs...)
}

// GetSpotImgURLBySpotID mocks base method.
func (m *MockImageRepository) GetSpotImgURLBySpotID(ctx context.Context, spotID string, opts ...repository.QueryOptions) ([]model.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, spotID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpotImgURLBySpotID", varargs...)
	ret0, _ := ret[0].([]model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotImgURLBySpotID indicates an expected call of GetSpotImgURLBySpotID.
func (mr *MockImageRepositoryMockRecorder) GetSpotImgURLBySpotID(ctx, spotID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, spotID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotImgURLBySpotID", reflect.TypeOf((*MockImageRepository)(nil).GetSpotImgURLBySpotID), varargs...)
}
