# ビルドステージ
FROM --platform=linux/amd64 golang:1.21.3 AS build

# 作業ディレクトリの設定
WORKDIR /app

# 依存関係をコピー
COPY docker/back/go.mod ./docker/back/
COPY docker/back/go.sum ./docker/back/

# 依存関係のインストール
WORKDIR /app/docker/back
RUN go mod download

WORKDIR /app

# ソースコードをコピー
COPY . .

# エントリポイントスクリプトをコピー
COPY docker/back/entrypoint.sh /usr/local/bin/

# エントリポイントスクリプトを実行可能にする
RUN chmod +x /usr/local/bin/entrypoint.sh

# アプリケーションのビルド
# GOARCH=amd64 は64ビットのx86アーキテクチャ用にバイナリをビルドする
WORKDIR /app/docker/back
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o server ./cmd/main.go

# 最終ステージ
FROM alpine:latest

# 作業ディレクトリの設定
WORKDIR /root/

# ビルドステージからバイナリをコピー
COPY --from=build /app/docker/back/server .
# プログラム以外に必要なファイルやディレクトリも最終ステージにコピーする
COPY --from=build /app/docker/back/.certificate/ .certificate/
COPY --from=build /app/.env .

# コンテナが起動するときに実行されるコマンド (バイナリにしたgolangのファイルを実行)
ENTRYPOINT ["entrypoint.sh"]
CMD ["./server"]
